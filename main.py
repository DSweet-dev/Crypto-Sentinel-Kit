import asyncio
from web3 import Web3
import config

# –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –ø–æ—Ä—ñ–≥ –∑ ETH –≤ Wei –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
WHALE_THRESHOLD_WEI = Web3.to_wei(config.WHALE_THRESHOLD_ETH, 'ether')

def handle_transaction(tx):
    """–û–±—Ä–æ–±–ª—è—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –≤–æ–Ω–∞ "–∫–∏—Ç–æ–≤–æ—é"."""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–ª—é—á 'value' —ñ —á–∏ —Å—É–º–∞ –ø–µ—Ä–µ–≤–∏—â—É—î –ø–æ—Ä—ñ–≥
        if 'value' in tx and tx['value'] > WHALE_THRESHOLD_WEI:
            value_in_eth = Web3.from_wei(tx['value'], 'ether')
            print("-----------------------------------------")
            print(f"üêã WHALE ALERT! üêã")
            print(f"  From: {tx['from']}")
            print(f"  To: {tx['to']}")
            print(f"  Value: {value_in_eth:.2f} ETH")
            print(f"  Hash: {tx['hash'].hex()}")
            print("-----------------------------------------")
    except Exception as e:
        print(f"Error processing transaction: {e}")

async def subscribe_to_pending_transactions(web3_instance):
    """–ü—ñ–¥–ø–∏—Å—É—î—Ç—å—Å—è –Ω–∞ –ø–æ—Ç—ñ–∫ –Ω–æ–≤–∏—Ö pending-—Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π."""
    subscription_id = await web3_instance.eth.subscribe('newPendingTransactions')
    print("Subscribed to new pending transactions...")
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–ª—É—Ö–∞—î–º–æ –ø–æ—Ç—ñ–∫
    async for tx_hash in subscription_id:
        try:
            tx = await web3_instance.eth.get_transaction(tx_hash)
            if tx:
                handle_transaction(tx)
        except Exception as e:
            # –Ü–Ω–æ–¥—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –∑–Ω–∏–∫–∞—î –∑ –º–µ–º–ø—É–ª—É, —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            # print(f"Could not get tx details for hash {tx_hash.hex()}: {e}")
            pass

async def main():
    # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—å –¥–æ –Ω–æ–¥–∏ —á–µ—Ä–µ–∑ WebSocket
    w3 = Web3(Web3.WebsocketProvider(config.NODE_WSS_URL))
    print(f"Connected to Ethereum node: {await w3.is_connected()}")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–ª—É—Ö–∞—á–∞
    await subscribe_to_pending_transactions(w3)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nScanner stopped by user.")
