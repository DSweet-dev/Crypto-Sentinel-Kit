import time
from web3 import Web3
import config

w3 = Web3(Web3.HTTPProvider(config.NODE_HTTP_URL))

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∏ —Ä–æ—É—Ç–µ—Ä—ñ–≤
uniswap_router = w3.eth.contract(address=config.UNISWAP_V2_ROUTER, abi=config.ROUTER_ABI)
sushiswap_router = w3.eth.contract(address=config.SUSHISWAP_ROUTER, abi=config.ROUTER_ABI)

def get_price(router, amount_in_wei, path):
    """–û—Ç—Ä–∏–º—É—î —Ü—ñ–Ω—É –æ–±–º—ñ–Ω—É —á–µ—Ä–µ–∑ —Ä–æ—É—Ç–µ—Ä DEX."""
    try:
        amounts_out = router.functions.getAmountsOut(amount_in_wei, path).call()
        return amounts_out[1]  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞, —è–∫–∏–π –æ—Ç—Ä–∏–º—É—î–º–æ
    except Exception as e:
        print(f"Error getting price: {e}")
        return 0

def check_arbitrage():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∞—Ä–±—ñ—Ç—Ä–∞–∂—É."""
    print("Checking prices...")
    
    amount_in = 1  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å WETH –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    amount_in_wei = w3.to_wei(amount_in, 'ether')
    
    # –®–ª—è—Ö –æ–±–º—ñ–Ω—É: WETH -> USDC
    trade_path = [config.WETH_ADDRESS, config.USDC_ADDRESS]

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω–∏
    # 1 WETH -> ? USDC –Ω–∞ Uniswap
    uniswap_price = get_price(uniswap_router, amount_in_wei, trade_path)
    # 1 WETH -> ? USDC –Ω–∞ Sushiswap
    sushiswap_price = get_price(sushiswap_router, amount_in_wei, trade_path)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑ 6 –¥–µ—Å—è—Ç–∫–æ–≤–∏—Ö –∑–Ω–∞–∫—ñ–≤ (—Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞ USDC)
    uniswap_usdc = uniswap_price / 10**6
    sushiswap_usdc = sushiswap_price / 10**6
    
    print(f"Uniswap price for 1 WETH: {uniswap_usdc:.2f} USDC")
    print(f"Sushiswap price for 1 WETH: {sushiswap_usdc:.2f} USDC")
    
    # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ —Ü—ñ–Ω–∏ —Ç–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ä—ñ–∑–Ω–∏—Ü—é
    price_diff = abs(uniswap_usdc - sushiswap_usdc)
    profit_percentage = (price_diff / max(uniswap_usdc, sushiswap_usdc)) * 100 if max(uniswap_usdc, sushiswap_usdc) > 0 else 0
    
    if profit_percentage > 0.5: # –®—É–∫–∞—î–º–æ —Ä—ñ–∑–Ω–∏—Ü—é –±—ñ–ª—å—à–µ 0.5%
        print(f"\nüö® Arbitrage Opportunity Found! üö®")
        print(f"   Difference: {price_diff:.2f} USDC ({profit_percentage:.2f}%)")
    else:
        print("No significant arbitrage opportunity found.")
    print("-" * 30)

if __name__ == "__main__":
    while True:
        check_arbitrage()
        time.sleep(60) # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
